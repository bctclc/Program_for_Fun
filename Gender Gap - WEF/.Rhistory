ggplotly()
qplot(age, circumference, data = Orange, geom = c("point", "line"), colour = Tree)
ggplotly()
qplot(date, value, data=economics_long, geom="point", group="variable")
?ylim
?scale_y_continuous
??scale_y_continuous
# Load data
unemployment <- read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=",")
unemployment[1:10,]
# Plain scatter plot
plot(1:length(unemployment$Value), unemployment$Value)
# Fitted linear line
lines(c(1,746), c(4.889523,6.42593))
# Scatter plot with loess
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
# Fix y-axis to start at zero
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2)
# Change color
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2, col="#CCCCCC", span=0.5)
# Load data
hotdogs <- read.csv("E:\\学习相关\\School Works\\Data Viz\\Assignment\\3\\ch04\\data\\hot-dog-contest-winners.csv", sep=",", header=TRUE)
# Default barchart
barplot(hotdogs$Dogs.eaten)
# Year labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year)
# Axis labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Fill color and border
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col="red", border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight USA colors
fill_colors <- c()
for ( i in 1:length(hotdogs$Country) ) {
if (hotdogs$Country[i] == "United States") {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight record years with color
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Spacing
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.3, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.5, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#3eb24d")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
# Load data
hotdogs <- read.csv("E:\\学习相关\\School Works\\Data Viz\\Assignment\\3\\ch04\\data\\hot-dog-contest-winners.csv", sep=",", header=TRUE)
# Default barchart
barplot(hotdogs$Dogs.eaten)
# Year labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year)
# Axis labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Fill color and border
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col="red", border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight USA colors
fill_colors <- c()
for ( i in 1:length(hotdogs$Country) ) {
if (hotdogs$Country[i] == "United States") {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight record years with color
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#3eb24d")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Spacing
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.3, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.5, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
stars(crime)
View(crime)
row.names(crime) <- crime$state
crime <- crime[,2:7]
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5))
View(crime)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5), full=FALSE)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5), draw.segments=TRUE)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5))
d <- data.frame(y = rnorm(20, 9, 2),
group = as.factor(rep(c('Post-FAP', 'Post-DEP'), each = 10)),
id = rep(1:10, 2))
View(d)
load("~/Rplot.png")
library(sunburstR)
devtools::install_github("timelyportfolio/sunburstR")
install.packages("devtools")
devtools::install_github("timelyportfolio/sunburstR")
install.packages("http://genome.crg.es/~didac/ggsunburst/ggsunburst_0.0.5.tar.gz", repos=NULL, type="source")
install.packages("ggplot2")
install.packages("rPython")
install.packages("http://genome.crg.es/~didac/ggsunburst/ggsunburst_0.0.5.tar.gz", repos=NULL, type="source")
install.packages("reshape2")
########################################
# what do you know about my film habit #
########################################
library(RCurl)
library(XML)
url1 = "http://movie.douban.com/people/xxxx/collect?start="
url2 = "&sort=time&rating=all&filter=all&mode=grid"
url = c()
for (k in seq(from=0, to=145, by=15)) {
url = c(url,paste(url1, k, url2, sep = ""))
}
attribute.name = c()
attribute.release_date = c()
attribute.run_time = c()
attribute.genre = c()
attribute.num_raters = c()
attribute.rating_dist = c()
attribute.imdb_link = c()
attribute.ctry = c()
for (j in url) {
doc = htmlTreeParse(j, useInternal=TRUE)
hrefs = xpathSApply(doc, "//div/div/div/a", xmlGetAttr, 'href')
subjects = hrefs[grepl("subject", hrefs)]
for (i in subjects) {
url = i
doc =
try(
htmlTreeParse(
url,
useInternal=TRUE))
if(class(doc) == "try-error") next;
attribute.name =
c(
attribute.name,
xpathSApply(doc, "//div[@class='info-area']/strong", xmlValue))
x = xpathSApply(doc, "//div[@id='info']", xmlValue)
ctry =
gsub(
"地区: |语言",
"",
regmatches(x, regexpr('地区:.+?语言', x)))
attribute.ctry =
c(
attribute.ctry,
ifelse(
length(ctry) ==0,
NA,
ctry))
attribute.release_date =
c(
attribute.release_date,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)))
attribute.run_time =
c(
attribute.run_time,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)))
attribute.genre =
c(
attribute.genre,
list(xpathSApply(doc, "//div[@id='info']/span[@property='v:genre']", xmlValue)))
attribute.num_raters =
c(
attribute.num_raters,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)))
rating =
as.numeric(
sub(
"%",
"",
xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)))/100
attribute.rating_dist =
c(
attribute.rating_dist,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)) == 0,
NA,
list(rating)))
k = xpathSApply(doc, "//div[@id='info']/a[@target='_blank']", xmlGetAttr, 'href')
link = k[grepl("imdb",k)]
attribute.imdb_link =
c(
attribute.imdb_link,
ifelse(
length(link) == 0,
NA,
link))
}
}
install.packages(RCurl)
install.packages("RCurl")
install.packages("XML")
########################################
# what do you know about my film habit #
########################################
library(RCurl)
library(XML)
url1 = "http://movie.douban.com/people/xxxx/collect?start="
url2 = "&sort=time&rating=all&filter=all&mode=grid"
url = c()
for (k in seq(from=0, to=145, by=15)) {
url = c(url,paste(url1, k, url2, sep = ""))
}
attribute.name = c()
attribute.release_date = c()
attribute.run_time = c()
attribute.genre = c()
attribute.num_raters = c()
attribute.rating_dist = c()
attribute.imdb_link = c()
attribute.ctry = c()
for (j in url) {
doc = htmlTreeParse(j, useInternal=TRUE)
hrefs = xpathSApply(doc, "//div/div/div/a", xmlGetAttr, 'href')
subjects = hrefs[grepl("subject", hrefs)]
for (i in subjects) {
url = i
doc =
try(
htmlTreeParse(
url,
useInternal=TRUE))
if(class(doc) == "try-error") next;
attribute.name =
c(
attribute.name,
xpathSApply(doc, "//div[@class='info-area']/strong", xmlValue))
x = xpathSApply(doc, "//div[@id='info']", xmlValue)
ctry =
gsub(
"地区: |语言",
"",
regmatches(x, regexpr('地区:.+?语言', x)))
attribute.ctry =
c(
attribute.ctry,
ifelse(
length(ctry) ==0,
NA,
ctry))
attribute.release_date =
c(
attribute.release_date,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)))
attribute.run_time =
c(
attribute.run_time,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)))
attribute.genre =
c(
attribute.genre,
list(xpathSApply(doc, "//div[@id='info']/span[@property='v:genre']", xmlValue)))
attribute.num_raters =
c(
attribute.num_raters,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)))
rating =
as.numeric(
sub(
"%",
"",
xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)))/100
attribute.rating_dist =
c(
attribute.rating_dist,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)) == 0,
NA,
list(rating)))
k = xpathSApply(doc, "//div[@id='info']/a[@target='_blank']", xmlGetAttr, 'href')
link = k[grepl("imdb",k)]
attribute.imdb_link =
c(
attribute.imdb_link,
ifelse(
length(link) == 0,
NA,
link))
}
}
ggplot(eco_US,aes(x=index,y=value,group=color, fill=color))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#adb0c9","#ffea07"))+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
### eco (US 2016)
Cincome <- read.csv("Est. Earned Income.csv")
ALFP <- read.csv("Labor Force Participation.csv")
DLOM <- read.csv("LOM.csv")
Epro_tech <- read.csv("Professional and Technical.csv")
Bwage <- read.csv("Wage Equality.csv")
index <- c("ALFP", "Bwage", "Cincome", "DLOM", "Epro_tech")
value <- c(ALFP[which(ALFP$Country=="United States" & ALFP$Year==2016),5],
Bwage[which(Bwage$Country=="United States" & Bwage$Year==2016),3],
Cincome[which(Cincome$Country=="United States" & Cincome$Year=="2016"),6],
DLOM[which(DLOM$Country=="United States" & DLOM$Year==2016),5],
Epro_tech[which(Epro_tech$Country=="United States" & Epro_tech$Year==2016),5])
eco_US <- as.data.frame(index)
eco_US$index <- as.character(eco_US$index)
eco_US <- cbind(eco_US, as.data.frame(value))
eco_US <- rbind(eco_US, c("AZLFP", 1-0.86), c("BZwage", 1-0.65),
c("CZincome",1-0.65), c("DZLOM", 1-0.65), c("EZpro_tech", 1-1))
eco_US$value <- as.numeric(eco_US$value)
eco_US[1,2] <- eco_US[1,2]*0.199
eco_US[6,2] <- eco_US[6,2]*0.199
eco_US[2,2] <- eco_US[2,2]*0.31
eco_US[7,2] <- eco_US[7,2]*0.31
eco_US[3,2] <- eco_US[3,2]*0.221
eco_US[8,2] <- eco_US[8,2]*0.221
eco_US[4,2] <- eco_US[4,2]*0.149
eco_US[9,2] <- eco_US[9,2]*0.149
eco_US[5,2] <- eco_US[5,2]*0.121
eco_US[10,2] <- eco_US[10,2]*0.121
eco_US$color <- "#ffea07"
eco_US[c(6:10),3] <- "#adb0c9"
eco_US[1,1] <- "aLFP"
eco_US[6,1] <- "aLFP"
eco_US[2,1] <- "bwage"
eco_US[7,1] <- "bwage"
eco_US[3,1] <- "cincome"
eco_US[8,1] <- "cincome"
eco_US[4,1] <- "dLOM"
eco_US[9,1] <- "dLOM"
eco_US[5,1] <- "epro_tech"
eco_US[10,1] <- "epro_tech"
ggplot(eco_US,aes(x=index,y=value,group=color, fill=color))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#adb0c9","#ffea07"))+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
Cincome <- read.csv("Est. Earned Income.csv")
ALFP <- read.csv("Labor Force Participation.csv")
DLOM <- read.csv("LOM.csv")
Epro_tech <- read.csv("Professional and Technical.csv")
Bwage <- read.csv("Wage Equality.csv")
setwd("E:\\学习相关\\R\\Program_for_Fun\\Gender Gap - WEF")
library(ggplot2)
Cincome <- read.csv("Est. Earned Income.csv")
ALFP <- read.csv("Labor Force Participation.csv")
DLOM <- read.csv("LOM.csv")
Epro_tech <- read.csv("Professional and Technical.csv")
Bwage <- read.csv("Wage Equality.csv")
index <- c("ALFP", "Bwage", "Cincome", "DLOM", "Epro_tech")
value <- c(ALFP[which(ALFP$Country=="United States" & ALFP$Year==2016),5],
Bwage[which(Bwage$Country=="United States" & Bwage$Year==2016),3],
Cincome[which(Cincome$Country=="United States" & Cincome$Year=="2016"),6],
DLOM[which(DLOM$Country=="United States" & DLOM$Year==2016),5],
Epro_tech[which(Epro_tech$Country=="United States" & Epro_tech$Year==2016),5])
eco_US <- as.data.frame(index)
eco_US$index <- as.character(eco_US$index)
eco_US <- cbind(eco_US, as.data.frame(value))
eco_US <- rbind(eco_US, c("AZLFP", 1-0.86), c("BZwage", 1-0.65),
c("CZincome",1-0.65), c("DZLOM", 1-0.65), c("EZpro_tech", 1-1))
eco_US$value <- as.numeric(eco_US$value)
eco_US[1,2] <- eco_US[1,2]*0.199
eco_US[6,2] <- eco_US[6,2]*0.199
eco_US[2,2] <- eco_US[2,2]*0.31
eco_US[7,2] <- eco_US[7,2]*0.31
eco_US[3,2] <- eco_US[3,2]*0.221
eco_US[8,2] <- eco_US[8,2]*0.221
eco_US[4,2] <- eco_US[4,2]*0.149
eco_US[9,2] <- eco_US[9,2]*0.149
eco_US[5,2] <- eco_US[5,2]*0.121
eco_US[10,2] <- eco_US[10,2]*0.121
eco_US$color <- "#ffea07"
eco_US[c(6:10),3] <- "#adb0c9"
eco_US[1,1] <- "aLFP"
eco_US[6,1] <- "aLFP"
eco_US[2,1] <- "bwage"
eco_US[7,1] <- "bwage"
eco_US[3,1] <- "cincome"
eco_US[8,1] <- "cincome"
eco_US[4,1] <- "dLOM"
eco_US[9,1] <- "dLOM"
eco_US[5,1] <- "epro_tech"
eco_US[10,1] <- "epro_tech"
ggplot(eco_US,aes(x=index,y=value,group=color, fill=color))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#adb0c9","#ffea07"))+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2,
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(eco_US,aes(x=index,y=value,group=color, fill=color))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#adb0c9","#ffea07"))+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(eco_US,aes(x=index,y=value,group=color, fill=color))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#adb0c9","#ffea07"))+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
literacy <- read.csv("Literacy Rate.csv")
primary <- read.csv("Primary Edu Enrollment.csv")
secondary <- read.csv("Secondary Edu Enrollment.csv")
tertiary <- read.csv("Tertiary Edu Enrollment.csv")
index <- c("Aliteracy", "Bprimary", "Csecondary", "Dtertiary")
value <- c(literacy[which(literacy$Country=="United States" & literacy$Year==2016),5],
primary[which(primary$Country=="United States" & primary$Year==2016),5],
secondary[which(secondary$Country=="United States" & secondary$Year==2016),5],
tertiary[which(tertiary$Country=="United States" & tertiary$Year==2016),5])
edu_US <- cbind(as.data.frame(index), as.data.frame(value))
edu_US$value <- as.numeric(edu_US$value)
edu_US[1,2] <- edu_US[1,2]*0.191
edu_US[2,2] <- edu_US[2,2]*0.459
edu_US[3,2] <- edu_US[3,2]*0.230
edu_US[4,2] <- edu_US[4,2]*0.121
ggplot(edu_US, aes(x=index, y=value))+
geom_bar(stat="identity")+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(
))
life <- read.csv("Healthy Life Expectancy.csv")
sex_ratio <- read.csv("Sex Ratio at Birth.csv")
index <- c("Aratio", "Bexp")
value <- c(sex_ratio[which(sex_ratio$Country=="United States" & sex_ratio$Year==2016),3],
life[which(life$Country=="United States" & life$Year==2015),5])
health_US <- cbind(as.data.frame(index), as.data.frame(value))
health_US$value <- as.numeric(health_US$value)
health_US$index <- as.character(health_US$index)
health_US[1,2] <- health_US[1,2]/0.944
health_US[2,2] <- health_US[2,2]/1.06
health_US <- rbind(health_US, c("AZratio", as.numeric(1-1)), c("BZexp", as.numeric(1-0.9811321)))
health_US$value <- as.numeric(health_US$value)
health_US[1,2] <- health_US[1,2]*0.693
health_US[3,2] <- health_US[3,2]*0.693
health_US[2,2] <- health_US[2,2]*0.307
health_US[4,2] <- health_US[4,2]*0.307
health_US$color <- "#ffea07"
health_US[c(3:4),3] <- "#adb0c9"
health_US[3,1]<- "Aratio"
health_US[4,1]<- "Bexp"
ggplot(health_US,aes(x=index,y=value,group=color, fill=color))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#adb0c9","#ffea07"))+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
head_state <- read.csv("Female Head of State.csv")
minister <- read.csv("Ministerial Positions.csv")
parliament <- read.csv("Women in Parliament.csv")
index <- c("Aparlia", "Bmini", "Chead")
value <- c(parliament[which(parliament$Country=="United States" & parliament$Year==2016),5],
minister[which(minister$Country=="United States" & minister$Year==2016),5],
head_state[which(head_state$Country=="United States" & head_state$Year==2016),4])
po_US <- cbind(as.data.frame(index), as.data.frame(value))
po_US$index <- as.character(po_US$index)
po_US <- rbind(po_US, c("AZparlia", 1-0.24), c("BZmini", 1-0.35), c("CZhead", 1))
po_US$value <- as.numeric(po_US$value)
po_US[1,2] <- po_US[1,2]*0.31
po_US[4,2] <- po_US[4,2]*0.31
po_US[2,2] <- po_US[2,2]*0.247
po_US[5,2] <- po_US[5,2]*0.247
po_US[3,2] <- po_US[3,2]*0.443
po_US[6,2] <- po_US[6,2]*0.443
po_US$color <- "#ffea07"
po_US[c(4:6),3] <- "#adb0c9"
po_US[4,1] <- "Aparlia"
po_US[5,1] <- "Bmini"
po_US[6,1] <- "Chead"
ggplot(po_US,aes(x=index,y=value,group=color, fill=color))+
geom_bar(stat="identity")+
scale_fill_manual(values=c("#adb0c9","#ffea07"))+
theme(panel.background = element_rect(fill = "#d3d3d3", color="#696969",size=2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
