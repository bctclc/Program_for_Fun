data(Orange)
qplot(age, circumference, data = Orange, geom = "line", colour = Tree)
qplot(age, circumference, data = Orange, geom = "line")
qplot(age, circumference, data = Orange, geom = "point", colour = Tree)
qplot(age, circumference, data = Orange, geom = c("point", "line"), colour = Tree)
qplot(age, circumference, data = Orange, geom = "line")
qplot(age, circumference, data = Orange, geom = "line", colour = Tree)
data(economics_long)
head(economics_long)
table(economics_long$variable)
qplot(date, value, data=economics_long, geom="point", group="variable")
qplot(date, value, data=economics_long, geom="line", group="variable") +
facet_grid(variable~.)
qplot(date, value, data=economics_long, geom="line", group="variable") +
facet_grid(variable~., scale="free_y")
?facet_grid
library(plotly)
install.packages("plotly")
library(plotly)
ggplotly()
qplot(age, circumference, data = Orange, geom = c("point", "line"), colour = Tree)
ggplotly()
qplot(date, value, data=economics_long, geom="point", group="variable")
?ylim
?scale_y_continuous
??scale_y_continuous
# Load data
unemployment <- read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=",")
unemployment[1:10,]
# Plain scatter plot
plot(1:length(unemployment$Value), unemployment$Value)
# Fitted linear line
lines(c(1,746), c(4.889523,6.42593))
# Scatter plot with loess
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
# Fix y-axis to start at zero
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2)
# Change color
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2, col="#CCCCCC", span=0.5)
# Load data
hotdogs <- read.csv("E:\\学习相关\\School Works\\Data Viz\\Assignment\\3\\ch04\\data\\hot-dog-contest-winners.csv", sep=",", header=TRUE)
# Default barchart
barplot(hotdogs$Dogs.eaten)
# Year labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year)
# Axis labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Fill color and border
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col="red", border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight USA colors
fill_colors <- c()
for ( i in 1:length(hotdogs$Country) ) {
if (hotdogs$Country[i] == "United States") {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight record years with color
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Spacing
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.3, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.5, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#3eb24d")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
# Load data
hotdogs <- read.csv("E:\\学习相关\\School Works\\Data Viz\\Assignment\\3\\ch04\\data\\hot-dog-contest-winners.csv", sep=",", header=TRUE)
# Default barchart
barplot(hotdogs$Dogs.eaten)
# Year labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year)
# Axis labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Fill color and border
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col="red", border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight USA colors
fill_colors <- c()
for ( i in 1:length(hotdogs$Country) ) {
if (hotdogs$Country[i] == "United States") {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight record years with color
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#3eb24d")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Spacing
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.3, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.5, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
stars(crime)
View(crime)
row.names(crime) <- crime$state
crime <- crime[,2:7]
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5))
View(crime)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5), full=FALSE)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5), draw.segments=TRUE)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5))
d <- data.frame(y = rnorm(20, 9, 2),
group = as.factor(rep(c('Post-FAP', 'Post-DEP'), each = 10)),
id = rep(1:10, 2))
View(d)
load("~/Rplot.png")
library(sunburstR)
devtools::install_github("timelyportfolio/sunburstR")
install.packages("devtools")
devtools::install_github("timelyportfolio/sunburstR")
install.packages("http://genome.crg.es/~didac/ggsunburst/ggsunburst_0.0.5.tar.gz", repos=NULL, type="source")
install.packages("ggplot2")
install.packages("rPython")
install.packages("http://genome.crg.es/~didac/ggsunburst/ggsunburst_0.0.5.tar.gz", repos=NULL, type="source")
install.packages("reshape2")
########################################
# what do you know about my film habit #
########################################
library(RCurl)
library(XML)
url1 = "http://movie.douban.com/people/xxxx/collect?start="
url2 = "&sort=time&rating=all&filter=all&mode=grid"
url = c()
for (k in seq(from=0, to=145, by=15)) {
url = c(url,paste(url1, k, url2, sep = ""))
}
attribute.name = c()
attribute.release_date = c()
attribute.run_time = c()
attribute.genre = c()
attribute.num_raters = c()
attribute.rating_dist = c()
attribute.imdb_link = c()
attribute.ctry = c()
for (j in url) {
doc = htmlTreeParse(j, useInternal=TRUE)
hrefs = xpathSApply(doc, "//div/div/div/a", xmlGetAttr, 'href')
subjects = hrefs[grepl("subject", hrefs)]
for (i in subjects) {
url = i
doc =
try(
htmlTreeParse(
url,
useInternal=TRUE))
if(class(doc) == "try-error") next;
attribute.name =
c(
attribute.name,
xpathSApply(doc, "//div[@class='info-area']/strong", xmlValue))
x = xpathSApply(doc, "//div[@id='info']", xmlValue)
ctry =
gsub(
"地区: |语言",
"",
regmatches(x, regexpr('地区:.+?语言', x)))
attribute.ctry =
c(
attribute.ctry,
ifelse(
length(ctry) ==0,
NA,
ctry))
attribute.release_date =
c(
attribute.release_date,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)))
attribute.run_time =
c(
attribute.run_time,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)))
attribute.genre =
c(
attribute.genre,
list(xpathSApply(doc, "//div[@id='info']/span[@property='v:genre']", xmlValue)))
attribute.num_raters =
c(
attribute.num_raters,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)))
rating =
as.numeric(
sub(
"%",
"",
xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)))/100
attribute.rating_dist =
c(
attribute.rating_dist,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)) == 0,
NA,
list(rating)))
k = xpathSApply(doc, "//div[@id='info']/a[@target='_blank']", xmlGetAttr, 'href')
link = k[grepl("imdb",k)]
attribute.imdb_link =
c(
attribute.imdb_link,
ifelse(
length(link) == 0,
NA,
link))
}
}
install.packages(RCurl)
install.packages("RCurl")
install.packages("XML")
########################################
# what do you know about my film habit #
########################################
library(RCurl)
library(XML)
url1 = "http://movie.douban.com/people/xxxx/collect?start="
url2 = "&sort=time&rating=all&filter=all&mode=grid"
url = c()
for (k in seq(from=0, to=145, by=15)) {
url = c(url,paste(url1, k, url2, sep = ""))
}
attribute.name = c()
attribute.release_date = c()
attribute.run_time = c()
attribute.genre = c()
attribute.num_raters = c()
attribute.rating_dist = c()
attribute.imdb_link = c()
attribute.ctry = c()
for (j in url) {
doc = htmlTreeParse(j, useInternal=TRUE)
hrefs = xpathSApply(doc, "//div/div/div/a", xmlGetAttr, 'href')
subjects = hrefs[grepl("subject", hrefs)]
for (i in subjects) {
url = i
doc =
try(
htmlTreeParse(
url,
useInternal=TRUE))
if(class(doc) == "try-error") next;
attribute.name =
c(
attribute.name,
xpathSApply(doc, "//div[@class='info-area']/strong", xmlValue))
x = xpathSApply(doc, "//div[@id='info']", xmlValue)
ctry =
gsub(
"地区: |语言",
"",
regmatches(x, regexpr('地区:.+?语言', x)))
attribute.ctry =
c(
attribute.ctry,
ifelse(
length(ctry) ==0,
NA,
ctry))
attribute.release_date =
c(
attribute.release_date,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)))
attribute.run_time =
c(
attribute.run_time,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)))
attribute.genre =
c(
attribute.genre,
list(xpathSApply(doc, "//div[@id='info']/span[@property='v:genre']", xmlValue)))
attribute.num_raters =
c(
attribute.num_raters,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)))
rating =
as.numeric(
sub(
"%",
"",
xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)))/100
attribute.rating_dist =
c(
attribute.rating_dist,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)) == 0,
NA,
list(rating)))
k = xpathSApply(doc, "//div[@id='info']/a[@target='_blank']", xmlGetAttr, 'href')
link = k[grepl("imdb",k)]
attribute.imdb_link =
c(
attribute.imdb_link,
ifelse(
length(link) == 0,
NA,
link))
}
}
setwd("E:\\学习相关\\R\\Program_for_Fun\\Gender Gap - WEF")
library(ggplot2)
library(plyr)
library(ggradar)
library(gridExtra)
BRICS <- c("China", "Brazil", "Russian Federation", "India", "South Africa")
overall <- read.csv("Overall.csv")
eco_par <- read.csv("Economic Participation.csv")
edu_att <- read.csv("Edu Attainment.csv")
income <- read.csv("Est. Earned Income.csv")
head_state <- read.csv("Female Head of State.csv")
health <- read.csv("Health and Survival.csv")
life <- read.csv("Healthy Life Expectancy.csv")
LFP <- read.csv("Labor Force Participation.csv")
literacy <- read.csv("Literacy Rate.csv")
LOM <- read.csv("LOM.csv")
minister <- read.csv("Ministerial Positions.csv")
poli_emp <- read.csv("Political Empowerment.csv")
primary <- read.csv("Primary Edu Enrollment.csv")
pro_tech <- read.csv("Professional and Technical.csv")
secondary <- read.csv("Secondary Edu Enrollment.csv")
sex_ratio <- read.csv("Sex Ratio at Birth.csv")
tertiary <- read.csv("Tertiary Edu Enrollment.csv")
wage <- read.csv("Wage Equality.csv")
parliament <- read.csv("Women in Parliament.csv")
overall$color <- "#e6e6e8"
overall[which((overall$Country %in% BRICS)==T),5] <- "#867A72"
overall[which(overall$Country=="China"),5] <- "#913c3c"
eco_par <- eco_par[which((eco_par$Country %in% BRICS)==T),]
overall <- overall[which((overall$Country %in% BRICS)==T),]
edu_att <- edu_att[which((edu_att$Country %in% BRICS)==T),]
income <- income[which((income$Country %in% BRICS)==T),]
head_state <- head_state[which((head_state$Country %in% BRICS)==T),]
health <- health[which((health$Country %in% BRICS)==T),]
life <- life[which((life$Country %in% BRICS)==T),]
LFP <- LFP[which((LFP$Country %in% BRICS)==T),]
literacy <- literacy[which((literacy$Country %in% BRICS)==T),]
LOM <- LOM[which((LOM$Country %in% BRICS)==T),]
minister <- minister[which((minister$Country %in% BRICS)==T),]
poli_emp <- poli_emp[which((poli_emp$Country %in% BRICS)==T),]
primary <- primary[which((primary$Country %in% BRICS)==T),]
pro_tech <- pro_tech[which((pro_tech$Country %in% BRICS)==T),]
secondary <- secondary[which((secondary$Country %in% BRICS)==T),]
sex_ratio <- sex_ratio[which((sex_ratio$Country %in% BRICS)==T),]
tertiary <- tertiary[which((tertiary$Country %in% BRICS)==T),]
wage <- wage[which((wage$Country %in% BRICS)==T),]
parliament <- parliament[which((parliament$Country %in% BRICS)==T),]
x <- data.frame(Country="Fake", Score=1, Rank=1, Year=2017)
View(x)
View(eco_par)
plots <-list()
for (i in BRICS){
temp <- eco_par[which(eco_par$Country==i),]
x$Score <- temp[which(temp$Year==2016),2]
temp <- rbind(temp, x)
p1 <- ggplot(temp, aes(x=Year, y=Score, color="white"))+
geom_step()+ ggtitle(i)+
theme(panel.background = element_rect(fill = "#000000"),
panel.border= element_blank())
plots[[i]] <- p1
}
do.call("grid.arrange", c(plots, ncol=1, nrow=5))
plots <-list()
for (i in BRICS){
temp <- eco_par[which(eco_par$Country==i),]
x$Score <- temp[which(temp$Year==2016),2]
temp <- rbind(temp, x)
p1 <- ggplot(temp, aes(x=Year, y=Score, color="white"))+
geom_step()+ ggtitle(i)+
theme(panel.background = element_rect(fill = "#000000"),
panel.border= element_blank(), panel.grid.major=element_line(colour=NA))
plots[[i]] <- p1
}
do.call("grid.arrange", c(plots, ncol=1, nrow=5))
plots <-list()
for (i in BRICS){
temp <- eco_par[which(edu_att$Country==i),]
x$Score <- temp[which(temp$Year==2016),2]
temp <- rbind(temp, x)
p1 <- ggplot(temp, aes(x=Year, y=Score, color="white"))+
geom_step()+ ggtitle(i)+
theme(panel.background = element_rect(fill = "#000000"),
panel.border= element_blank(), panel.grid.major=element_line(colour=NA))
plots[[i]] <- p1
}
do.call("grid.arrange", c(plots, ncol=1, nrow=5))
plots <-list()
for (i in BRICS){
temp <- eco_par[which(edu_att$Country==i),]
x$Score <- temp[which(temp$Year==2016),2]
temp <- rbind(temp, x)
p1 <- ggplot(temp, aes(x=Year, y=Score, color="white"))+
geom_step()+ ggtitle(i)+
theme(panel.background = element_rect(fill = "#000000"),
panel.border= element_blank(), panel.grid.major=element_line(colour=NA))
plots[[i]] <- p1
}
do.call("grid.arrange", c(plots, ncol=1, nrow=5))
View(edu_att)
plots <-list()
for (i in BRICS){
temp <- edu_att[which(edu_att$Country==i),]
x$Score <- temp[which(temp$Year==2016),2]
temp <- rbind(temp, x)
p1 <- ggplot(temp, aes(x=Year, y=Score, color="white"))+
geom_step()+ ggtitle(i)+
theme(panel.background = element_rect(fill = "#000000"),
panel.border= element_blank(), panel.grid.major=element_line(colour=NA))
plots[[i]] <- p1
}
do.call("grid.arrange", c(plots, ncol=1, nrow=5))
plots <-list()
for (i in BRICS){
temp <- health[which(health$Country==i),]
x$Score <- temp[which(temp$Year==2016),2]
temp <- rbind(temp, x)
p1 <- ggplot(temp, aes(x=Year, y=Score, color="white"))+
geom_step()+ ggtitle(i)+
theme(panel.background = element_rect(fill = "#000000"),
panel.border= element_blank(), panel.grid.major=element_line(colour=NA))
plots[[i]] <- p1
}
do.call("grid.arrange", c(plots, ncol=1, nrow=5))
plots <-list()
for (i in BRICS){
temp <- poli_emp[which(poli_emp$Country==i),]
x$Score <- temp[which(temp$Year==2016),2]
temp <- rbind(temp, x)
p1 <- ggplot(temp, aes(x=Year, y=Score, color="white"))+
geom_step()+ ggtitle(i)+
theme(panel.background = element_rect(fill = "#000000"),
panel.border= element_blank(), panel.grid.major=element_line(colour=NA))
plots[[i]] <- p1
}
do.call("grid.arrange", c(plots, ncol=1, nrow=5))
View(edu_att)
View(eco_par)
View(health)
View(poli_emp)
View(income)
LFP$cat <- "1LFP"
wage$cat <- "2wage"
income$cat <- "3income"
LOM$cat <- "4LOM"
pro_tech$cat <- "5pro-tech"
literacy$cat <- "6literacy"
primary$cat <- "7primary_edu"
secondary$cat <- "8secondary_edu"
tertiary$cat <- "9tertiary_edu"
sex_ratio$cat <- "91sex_ratio"
life$cat <- "92life_exp"
parliament$cat <- "93parliament"
minister$cat <- "94ministerial_position"
head_state$cat <- "95head_of_state"
primary[5,4] <- 1
LOM[5,4] <- 0.03
pro_tech[5,4] <- 1.07
breakdown <- rbind(LFP[which(LFP$Year==2016),c(1,4,8)],
wage[which(wage$Year==2016),c(1,3,6)],
income[which(income$Year==2016),c(1,6,9)],
LOM[which(LOM$Year==2016),c(1,4,8)],
pro_tech[which(pro_tech$Year==2016),c(1,4,9)],
literacy[which(literacy$Year==2016),c(1,4,8)],
primary[which(primary$Year==2016),c(1,4,8)],
secondary[which(secondary$Year==2016),c(1,4,8)],
tertiary[which(tertiary$Year==2016),c(1,4,8)],
sex_ratio[which(sex_ratio$Year==2016),c(1,2,6)],
life[which(life$Year==2016),c(1,4,8)],
parliament[which(parliament$Year==2016),c(1,4,8)],
minister[which(minister$Year==2016),c(1,4,8)],
head_state[which(head_state$Year==2016),c(1,4,7)])
View(breakdown)
