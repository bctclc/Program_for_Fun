my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
c(1, 2, 3, 4) + c(0, 10, 1000)
z*2 + 1000
my_div
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect<-c(0.5,55,-10,6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
my-name<-c(my_char, "Claire")
my_name<-c(my_char, "Claire")
my_name
past(my_name,collapse="")
paste(my_name,collapse="")
paste(my_name,collapse=" ")
Try paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data(iris)
qplot(Sepal.Length, Petal.Length, data = iris)
?qplot
qplot(Sepal.Length, Petal.Length, data = iris, color = Species)
qplot(Sepal.Length, Petal.Length, data = iris, color = Species, size = Petal.Width)
qplot(Sepal.Length, Petal.Length, data = iris, geom = "line", color = Species)
data(Orange)
qplot(age, circumference, data = Orange, geom = "line", colour = Tree)
qplot(age, circumference, data = Orange, geom = "line")
qplot(age, circumference, data = Orange, geom = "point", colour = Tree)
qplot(age, circumference, data = Orange, geom = c("point", "line"), colour = Tree)
qplot(age, circumference, data = Orange, geom = "line")
qplot(age, circumference, data = Orange, geom = "line", colour = Tree)
data(economics_long)
head(economics_long)
table(economics_long$variable)
qplot(date, value, data=economics_long, geom="point", group="variable")
qplot(date, value, data=economics_long, geom="line", group="variable") +
facet_grid(variable~.)
qplot(date, value, data=economics_long, geom="line", group="variable") +
facet_grid(variable~., scale="free_y")
?facet_grid
library(plotly)
install.packages("plotly")
library(plotly)
ggplotly()
qplot(age, circumference, data = Orange, geom = c("point", "line"), colour = Tree)
ggplotly()
qplot(date, value, data=economics_long, geom="point", group="variable")
?ylim
?scale_y_continuous
??scale_y_continuous
# Load data
unemployment <- read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=",")
unemployment[1:10,]
# Plain scatter plot
plot(1:length(unemployment$Value), unemployment$Value)
# Fitted linear line
lines(c(1,746), c(4.889523,6.42593))
# Scatter plot with loess
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
# Fix y-axis to start at zero
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2)
# Change color
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2, col="#CCCCCC", span=0.5)
# Load data
hotdogs <- read.csv("E:\\学习相关\\School Works\\Data Viz\\Assignment\\3\\ch04\\data\\hot-dog-contest-winners.csv", sep=",", header=TRUE)
# Default barchart
barplot(hotdogs$Dogs.eaten)
# Year labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year)
# Axis labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Fill color and border
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col="red", border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight USA colors
fill_colors <- c()
for ( i in 1:length(hotdogs$Country) ) {
if (hotdogs$Country[i] == "United States") {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight record years with color
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Spacing
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.3, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.5, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#3eb24d")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
# Load data
hotdogs <- read.csv("E:\\学习相关\\School Works\\Data Viz\\Assignment\\3\\ch04\\data\\hot-dog-contest-winners.csv", sep=",", header=TRUE)
# Default barchart
barplot(hotdogs$Dogs.eaten)
# Year labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year)
# Axis labels
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Fill color and border
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col="red", border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight USA colors
fill_colors <- c()
for ( i in 1:length(hotdogs$Country) ) {
if (hotdogs$Country[i] == "United States") {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Highlight record years with color
fill_colors <- c()
for ( i in 1:length(hotdogs$New.record) ) {
if (hotdogs$New.record[i] == 1) {
fill_colors <- c(fill_colors, "#3eb24d")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Spacing
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.3, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.5, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
# Main title
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, space=0.25, xlab="Year", ylab="Hot dogs and buns (HDB) eaten", main="Nathan's Hot Dog Eating Contest Results, 1980-2010")
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
stars(crime)
View(crime)
row.names(crime) <- crime$state
crime <- crime[,2:7]
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5))
View(crime)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5), full=FALSE)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5), draw.segments=TRUE)
stars(crime, flip.labels=FALSE, key.loc = c(15, 1.5))
d <- data.frame(y = rnorm(20, 9, 2),
group = as.factor(rep(c('Post-FAP', 'Post-DEP'), each = 10)),
id = rep(1:10, 2))
View(d)
load("~/Rplot.png")
library(sunburstR)
devtools::install_github("timelyportfolio/sunburstR")
install.packages("devtools")
devtools::install_github("timelyportfolio/sunburstR")
install.packages("http://genome.crg.es/~didac/ggsunburst/ggsunburst_0.0.5.tar.gz", repos=NULL, type="source")
install.packages("ggplot2")
install.packages("rPython")
install.packages("http://genome.crg.es/~didac/ggsunburst/ggsunburst_0.0.5.tar.gz", repos=NULL, type="source")
install.packages("reshape2")
########################################
# what do you know about my film habit #
########################################
library(RCurl)
library(XML)
url1 = "http://movie.douban.com/people/xxxx/collect?start="
url2 = "&sort=time&rating=all&filter=all&mode=grid"
url = c()
for (k in seq(from=0, to=145, by=15)) {
url = c(url,paste(url1, k, url2, sep = ""))
}
attribute.name = c()
attribute.release_date = c()
attribute.run_time = c()
attribute.genre = c()
attribute.num_raters = c()
attribute.rating_dist = c()
attribute.imdb_link = c()
attribute.ctry = c()
for (j in url) {
doc = htmlTreeParse(j, useInternal=TRUE)
hrefs = xpathSApply(doc, "//div/div/div/a", xmlGetAttr, 'href')
subjects = hrefs[grepl("subject", hrefs)]
for (i in subjects) {
url = i
doc =
try(
htmlTreeParse(
url,
useInternal=TRUE))
if(class(doc) == "try-error") next;
attribute.name =
c(
attribute.name,
xpathSApply(doc, "//div[@class='info-area']/strong", xmlValue))
x = xpathSApply(doc, "//div[@id='info']", xmlValue)
ctry =
gsub(
"地区: |语言",
"",
regmatches(x, regexpr('地区:.+?语言', x)))
attribute.ctry =
c(
attribute.ctry,
ifelse(
length(ctry) ==0,
NA,
ctry))
attribute.release_date =
c(
attribute.release_date,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)))
attribute.run_time =
c(
attribute.run_time,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)))
attribute.genre =
c(
attribute.genre,
list(xpathSApply(doc, "//div[@id='info']/span[@property='v:genre']", xmlValue)))
attribute.num_raters =
c(
attribute.num_raters,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)))
rating =
as.numeric(
sub(
"%",
"",
xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)))/100
attribute.rating_dist =
c(
attribute.rating_dist,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)) == 0,
NA,
list(rating)))
k = xpathSApply(doc, "//div[@id='info']/a[@target='_blank']", xmlGetAttr, 'href')
link = k[grepl("imdb",k)]
attribute.imdb_link =
c(
attribute.imdb_link,
ifelse(
length(link) == 0,
NA,
link))
}
}
install.packages(RCurl)
install.packages("RCurl")
install.packages("XML")
########################################
# what do you know about my film habit #
########################################
library(RCurl)
library(XML)
url1 = "http://movie.douban.com/people/xxxx/collect?start="
url2 = "&sort=time&rating=all&filter=all&mode=grid"
url = c()
for (k in seq(from=0, to=145, by=15)) {
url = c(url,paste(url1, k, url2, sep = ""))
}
attribute.name = c()
attribute.release_date = c()
attribute.run_time = c()
attribute.genre = c()
attribute.num_raters = c()
attribute.rating_dist = c()
attribute.imdb_link = c()
attribute.ctry = c()
for (j in url) {
doc = htmlTreeParse(j, useInternal=TRUE)
hrefs = xpathSApply(doc, "//div/div/div/a", xmlGetAttr, 'href')
subjects = hrefs[grepl("subject", hrefs)]
for (i in subjects) {
url = i
doc =
try(
htmlTreeParse(
url,
useInternal=TRUE))
if(class(doc) == "try-error") next;
attribute.name =
c(
attribute.name,
xpathSApply(doc, "//div[@class='info-area']/strong", xmlValue))
x = xpathSApply(doc, "//div[@id='info']", xmlValue)
ctry =
gsub(
"地区: |语言",
"",
regmatches(x, regexpr('地区:.+?语言', x)))
attribute.ctry =
c(
attribute.ctry,
ifelse(
length(ctry) ==0,
NA,
ctry))
attribute.release_date =
c(
attribute.release_date,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:initialReleaseDate']", xmlValue)))
attribute.run_time =
c(
attribute.run_time,
ifelse(
length(xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@id='info']/span[@property='v:runtime']", xmlValue)))
attribute.genre =
c(
attribute.genre,
list(xpathSApply(doc, "//div[@id='info']/span[@property='v:genre']", xmlValue)))
attribute.num_raters =
c(
attribute.num_raters,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)) == 0,
NA,
xpathSApply(doc, "//div[@class='rating_sum']/a/span[@property='v:votes']", xmlValue)))
rating =
as.numeric(
sub(
"%",
"",
xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)))/100
attribute.rating_dist =
c(
attribute.rating_dist,
ifelse(
length(xpathSApply(doc, "//div[@class='rating_wrap clearbox']/span[@class='rating_per']", xmlValue)) == 0,
NA,
list(rating)))
k = xpathSApply(doc, "//div[@id='info']/a[@target='_blank']", xmlGetAttr, 'href')
link = k[grepl("imdb",k)]
attribute.imdb_link =
c(
attribute.imdb_link,
ifelse(
length(link) == 0,
NA,
link))
}
}
setwd("E:\\学习相关\\R\\Program_for_Fun\\Presidential_Debate_Word_Cloud")
library(NLP)
library(RColorBrewer)
library(tm)
library(SnowballC)
library(wordcloud)
file <- read.csv("vp_debate.csv", header = F)
file$V1 <- as.character(file$V1)
View(file)
clean <- data.frame(x = " ", y = " ")
clean$x <- as.character(clean$x)
clean$y <- as.character(clean$y)
for (i in 1:523){
if (is.na(strsplit(as.character(file[i,1]), ":")[[1]][2]) == F) {
name <- strsplit(as.character(file[i,1]), ":")[[1]][1]
}
else {
r <- as.character(file[i,1])
c <- c(name, ": ", r)
file$V1[i] <- paste(c, collapse = "")
}
}
for (i in 1:523){
clean[i, 1] <- strsplit(as.character(file[i,1]), ":")[[1]][1]
clean[i, 2] <- strsplit(as.character(file[i,1]), ":")[[1]][2]
}
View(clean)
file <- read.csv("vp_debate.csv", header = F)
file$V1 <- as.character(file$V1)
clean <- data.frame(x = " ", y = " ")
clean$x <- as.character(clean$x)
clean$y <- as.character(clean$y)
for (i in 1:523){
if (is.na(strsplit(as.character(file[i,1]), ":")[[1]][2]) == F) {
name <- strsplit(as.character(file[i,1]), ":")[[1]][1]
}
else {
r <- as.character(file[i,1])
c <- c(name, ": ", r)
file$V1[i] <- paste(c, collapse = "")
}
}
View(file)
file <- read.csv("vp_debate.csv", header = F)
file$V1 <- as.character(file$V1)
clean <- data.frame(x = " ", y = " ")
clean$x <- as.character(clean$x)
clean$y <- as.character(clean$y)
for (i in 1:523){
if (is.na(strsplit(as.character(file[i,1]), ":")[[1]][2]) == F) {
name <- strsplit(as.character(file[i,1]), ":")[[1]][1]
}
else {
r <- as.character(file[i,1])
c <- c(name, ": ", r)
file$V1[i] <- paste(c, collapse = "")
}
}
View(file)
for (i in 1:523){
clean[i, 1] <- strsplit(as.character(file[i,1]), ":")[[1]][1]
clean[i, 2] <- strsplit(as.character(file[i,1]), ":")[[1]][2]
}
file <- read.csv("vp_debate.csv", header = F)
file$V1 <- as.character(file$V1)
clean <- data.frame(x = " ", y = " ")
clean$x <- as.character(clean$x)
clean$y <- as.character(clean$y)
for (i in 1:523){
if (is.na(strsplit(as.character(file[i,1]), ":")[[1]][2]) == F) {
name <- strsplit(as.character(file[i,1]), ":")[[1]][1]
}
else {
r <- as.character(file[i,1])
c <- c(name, ": ", r)
file$V1[i] <- paste(c, collapse = "")
}
}
for (i in 1:523){
clean[i, 1] <- strsplit(as.character(file[i,1]), ":")[[1]][1]
clean[i, 2] <- strsplit(as.character(file[i,1]), ":")[[1]][2]
}
file <- read.csv("vp_debate.csv", header = F)
file$V1 <- as.character(file$V1)
clean <- data.frame(x = " ", y = " ")
clean$x <- as.character(clean$x)
clean$y <- as.character(clean$y)
for (i in 1:523){
if (is.na(strsplit(as.character(file[i,1]), ":")[[1]][2]) == F) {
name <- strsplit(as.character(file[i,1]), ":")[[1]][1]
}
else {
r <- as.character(file[i,1])
c <- c(name, ": ", r)
file$V1[i] <- paste(c, collapse = "")
}
}
for (i in 1:523){
clean[i, 1] <- strsplit(as.character(file[i,1]), ":")[[1]][1]
clean[i, 2] <- strsplit(as.character(file[i,1]), ":")[[1]][2]
}
Pence <- clean[which(clean$x=="PENCE"),]
kaine <- clean[which(clean$x=="KAINE"),]
Quijano <- clean[which(clean$x=="QUIJANO"),]
Kaine <- clean[which(clean$x=="KAINE"),]
wordcloud(Pence_Corpus, min.freq = 5, max.words = 200, random.order = FALSE, colors = "gray")
Pence_Corpus <- Corpus(VectorSource(Pence$y))
Pence_Corpus <- tm_map(Pence_Corpus, tolower)
Pence_Corpus <- tm_map(Pence_Corpus, PlainTextDocument)
Pence_Corpus <- tm_map(Pence_Corpus, removePunctuation)
wordcloud(Pence_Corpus, min.freq = 5, max.words = 200, random.order = FALSE, colors = "gray")
Kaine_Corpus <- Corpus(VectorSource(Kaine$y))
Kaine_Corpus <- tm_map(Kaine_Corpus, tolower)
Kaine_Corpus <- tm_map(Kaine_Corpus, PlainTextDocument)
Kaine_Corpus <- tm_map(Kaine_Corpus, removePunctuation)
wordcloud(Kaine_Corpus, min.freq = 5, max.words = 200, random.order = FALSE, colors = "gray")
Qui_Corpus <- Corpus(VectorSource(Quijano$y))
Qui_Corpus <- tm_map(Qui_Corpus, tolower)
Qui_Corpus <- tm_map(Qui_Corpus, PlainTextDocument)
Qui_Corpus <- tm_map(Qui_Corpus, removePunctuation)
wordcloud(Qui_Corpus, max.words = 200, random.order = FALSE, colors = "gray")
